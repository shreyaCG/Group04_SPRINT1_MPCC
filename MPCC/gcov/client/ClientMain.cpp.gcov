        -:    0:Source:ClientMain.cpp
        -:    1:#include "SockClient.h"
        -:    2:#include "unistd.h"
        -:    3:#include"details.h"
        -:    4://take port number and ip from command line
        4:    5:int main(int argc, char *argv[])
        -:    6:{
        -:    7:
        -:    8:	try {
        4:    9:		if(argc<3){
    #####:   10:                        throw("Insufficient arguments\nUsage: <IP Address> <Port Number>");
        -:   11:                }
        -:   12:                else {
        4:   13:			int New_Clientfd, flags=0,option;
        -:   14:			
        -:   15:			//allocate dynamic memory
        4:   16:			Client *C = new Client(atoi(argv[2]), argv[1]);
       4*:   17:			details d;
        -:   18:
        4:   19:			C->Create_Socket();
        4:   20:			C->ConnectClient();
        4:   21:			New_Clientfd = C->getCliSockfd();//get client socket
        -:   22:
        -:   23:			char buf[MAX_BUF];
        -:   24:			//Display option to select
        4:   25:			cout<<"Do you want to register or login?"<<endl;
        4:   26:			cout<<"\tEnter 1 to Register"<<endl;
        4:   27:			cout<<"\tEnter 2 to login"<<endl;
        4:   28:			cout<<"Choose your option: ";
        4:   29:			cin>>option;
        -:   30:			
        -:   31:			//Select option to either register or login
        4:   32:			switch(option)
        -:   33:			{
        -:   34:				//Registration
        2:   35:				case 1:
        2:   36:					send(New_Clientfd,"1",2,0);
        2:   37:					recv(New_Clientfd,buf,sizeof(buf),0);
        2:   38:					if(strcmp(buf,"register")==0)
        -:   39:					{
        2:   40:						d.setdetails();
        4:   41:						string str = d.toString();
        2:   42:						cout<<str<<endl;
        2:   43:						send(New_Clientfd,str.c_str(),str.length(),0);
        -:   44:					}
        2:   45:					memset(&buf,0,MAX_BUF);
        2:   46:					recv(New_Clientfd,buf,sizeof(buf),0);
        2:   47:					if(strcmp(buf,"success")==0)
        -:   48:					{
        2:   49:						cout<<endl;
        2:   50:						cout<<"Registration successfull"<<endl;
        2:   51:						exit(1);
        -:   52:					}
        -:   53:					else
        -:   54:					{
    #####:   55:						cout<<endl;
    #####:   56:						cout<<"Registration unsuccessful"<<endl;
    #####:   57:						exit(1);
        -:   58:					}
        -:   59:					break;	
        -:   60:				//login
        2:   61:				case 2:
        2:   62:					send(New_Clientfd,"2",2,0);
        2:   63:					recv(New_Clientfd,buf,sizeof(buf),0);	
        2:   64:					if(strcmp(buf,"login")==0)
        -:   65:					{
        2:   66:						d.setdetails();
        4:   67:						string str1 = d.toString();
        2:   68:						cout<<str1<<endl;
        2:   69:						send(New_Clientfd,str1.c_str(),str1.length(),0);
        2:   70:						memset(&buf,0,MAX_BUF);
        2:   71:						recv(New_Clientfd,buf,sizeof(buf),0);
        2:   72:						if(strcmp(buf,"success")==0)
        -:   73:						{
        2:   74:							cout<<"login successful"<<endl;
        2:   75:							cout<<"You can now continue to chat with other users"<<endl;
        -:   76:						}
        2:   77:						if(strcmp(buf,"failure")==0)
        -:   78:						{
    #####:   79:							cout<<"\nLogin Unsuccessful"<<endl;
    #####:   80:							cout<<"Terminated, Please Register to login"<<endl;
    #####:   81:							exit(1);
        -:   82:						}
        -:   83:					}
        2:   84:					break;
        -:   85:			}
        -:   86:			
        -:   87:			//thread recieve any mesage sent by server 
       2*:   88:			thread readmsg(RecvData, New_Clientfd, flags); 	
        -:   89:			
        -:   90:			//thread to send messages to the server
       2*:   91:			thread writemsg(SendData, New_Clientfd, flags); 
        -:   92:	
        -:   93:			//stop the threads
        2:   94:			readmsg.join();
    #####:   95:			writemsg.join();
        -:   96:			
        -:   97:			//close client socket
    #####:   98:			C->ClientClose(C->getCliSockfd());
        -:   99:		}
        -:  100:	}
    =====:  101:	catch(const char* str) {
    =====:  102:		cout<<"Exception: "<<str<<endl;
        -:  103:	}
    #####:  104:	return 0;
        -:  105:}
