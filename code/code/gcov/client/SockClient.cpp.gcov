        -:    0:Source:SockClient.cpp
        -:    1:#include "SockClient.h"
        -:    2:#include "details.h"
        -:    3://creates client sockets
        2:    4:void Client::Create_Socket()
        -:    5:{
        -:    6:	//client socket creation
        2:    7:	sockfd = socket(AF_INET, SOCK_STREAM, 0);
        2:    8:	if(sockfd < 0)
        -:    9:	{
    #####:   10:		perror("socket() error");
    #####:   11:		exit(EXIT_FAILURE);
        -:   12:	}
        2:   13:	cout<<"[+]Client Socket Created"<<endl;
        2:   14:	memset(&server_addr, 0, sizeof(server_addr));
        2:   15:	server_addr.sin_family = AF_INET;
        2:   16:	server_addr.sin_port = htons(Port);
        2:   17:	server_addr.sin_addr.s_addr = inet_addr((const char*)ipaddr.c_str());
        -:   18:	
        2:   19:	cout<<"[+]Client bind to port no:"<<Port<<" and ip_address: "<<ipaddr<<endl;
        2:   20:}
        -:   21://connect the client to the server
        2:   22:void Client::ConnectClient()
        -:   23:{
        -:   24:	//connect the client 
        2:   25:	int ret = connect(sockfd,(struct sockaddr*)&server_addr,sizeof(server_addr));
        2:   26:	if(ret < 0)
        -:   27:	{
    #####:   28:		perror("connect() error: ");
    #####:   29:		exit(EXIT_FAILURE);
        -:   30:	}
        -:   31:
        2:   32:	cout<<"[+]Client connected to the server"<<endl;
        2:   33:}
        -:   34://close the client socket
    #####:   35:void Client::cliClose(int sfd)
        -:   36:{
    #####:   37:	close(sfd);
    #####:   38:}
        -:   39:// function send message to client that the chatroom is full
        5:   40:void RecvData(int clientSocketFd, int flags)
        -:   41:{
        -:   42:
        -:   43:   int dataRecvd;
        -:   44:   char rcvDataBuf[MAX_BUF];
        -:   45:
        -:   46:   while(1)
        -:   47:   {
        5:   48:      memset(&rcvDataBuf, 0, MAX_BUF);
        5:   49:      dataRecvd = recv(clientSocketFd, rcvDataBuf, MAX_BUF, flags);
        -:   50:      // if chatroom is full then exit
        3:   51:      if(!strcmp(rcvDataBuf,"#FULL"))
        -:   52:      {
    #####:   53:         cout<<"Chatroom is full. Exiting"<<endl;
    #####:   54:         close(clientSocketFd);
    #####:   55:         exit(1);
        -:   56:      }
        3:   57:      if(dataRecvd>0) cout<<rcvDataBuf<<endl;
        -:   58:   }
        -:   59:}
        -:   60:// this function sends data taken from the terminal to the server
        6:   61:void SendData(int clientSocketFd, int flags)
        -:   62:{
        -:   63:   char sendDataBuf[MAX_BUF];
        -:   64:   int dataSent;
        -:   65:   while(1)
        -:   66:   {
        6:   67:      memset(&sendDataBuf, 0, MAX_BUF);
        6:   68:      cin.clear();
        -:   69:
        6:   70:      cin.getline(sendDataBuf,MAX_BUF);
        -:   71:      
        6:   72:      dataSent = send(clientSocketFd, sendDataBuf, strlen(sendDataBuf), flags);
        6:   73:      if(!strcmp(sendDataBuf, "bye"))
        -:   74:      {
        2:   75:         close(clientSocketFd);
        2:   76:         exit(1);
        -:   77:      }
        -:   78:   }
        -:   79:}
        -:   80:
        -:   81:
        -:   82:
        -:   83:
        -:   84:
        -:   85:
        -:   86:
        -:   87:
        -:   88:
        -:   89:
        -:   90:
        -:   91:
